{"version":3,"sources":["components/MixedNodeElement.js","components/PureSvgNodeElement.js","components/FamilyTree.js","components/Viewer.js","components/Switch/index.js","components/Editor.js","AppRouter.js","index.js"],"names":["MixedNodeElement","nodeData","triggerNodeToggle","foreignObjectProps","Fragment","r","style","display","flexDirection","alignItems","border","paddingBottom","backgroundColor","name","listStyleType","padding","attributes","Object","keys","map","labelKey","i","key","children","textAlign","onClick","__rd3t","collapsed","textLayout","vertical","title","textAnchor","x","attribute","dy","horizontal","y","PureSvgNodeElement","nodeDatum","orientation","toggleNode","onNodeClick","className","entries","labelValue","customNodeFnMapping","svg","description","fn","rd3tProps","configs","mixed","width","nodeSize","height","FamilyTree","props","state","translateX","translateY","dimensions","this","treeContainer","getBoundingClientRect","setState","data","configurations","ref","tc","renderCustomNodeElement","undefined","rootNodeClassName","branchNodeClassName","translate","pathFunc","collapsible","initialDepth","zoomable","zoom","scaleExtent","separation","enableLegacyTransitions","transitionDuration","depthFactor","styles","shouldCollapseNeighborNodes","Component","Viewer","Input","variable","onChange","checked","type","id","htmlFor","appState","countNodes","count","n","reduce","sum","child","Editor","handleCustomNodeFnChange","evt","customNodeKey","target","value","toggleCollapseNeighborNodes","prevState","generateConfigs","addedNodesCount","orgChartJson","totalNodeCount","Array","isArray","min","max","siblings","nonSiblings","nodes","node","circle","fill","stroke","leafNode","setTreeData","bind","setLargeTree","setTitle","setOrientation","setPathFunc","handleChange","handleFloatChange","toggleCollapsible","toggleZoomable","setScaleExtent","setSeparation","setNodeSize","parsedIntValue","parseInt","isNaN","parsedFloatValue","parseFloat","version","marginBottom","rows","JSON","stringify","event","parse","navigator","clipboard","writeText","disabled","Switch","color","defaultValue","console","log","args","onNodeMouseOver","onNodeMouseOut","onLinkClick","onLinkMouseOver","onLinkMouseOut","AppRouter","path","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0afee819.chunk.js","sourcesContent":["import React from 'react';\n\nconst MixedNodeElement = ({ nodeData = {}, triggerNodeToggle, foreignObjectProps = {} }) => {\n  return (\n    <React.Fragment>\n      <circle r={20}></circle>\n      <foreignObject {...foreignObjectProps}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            border: '1px solid black',\n            paddingBottom: '1rem',\n            backgroundColor: 'rgb(248, 248, 255)', // ghostwhite\n          }}\n        >\n          <h3>{nodeData.name}</h3>\n          <ul style={{ listStyleType: 'none', padding: 0 }}>\n            {nodeData.attributes &&\n              Object.keys(nodeData.attributes).map((labelKey, i) => (\n                <li key={`${labelKey}-${i}`}>\n                  {labelKey}: {nodeData.attributes[labelKey]}\n                </li>\n              ))}\n          </ul>\n          {nodeData.children && (\n            <button style={{ textAlign: 'center' }} onClick={triggerNodeToggle}>\n              {nodeData.__rd3t.collapsed ? '⬅️ ➡️ Expand' : '➡️ ⬅️ Collapse'}\n            </button>\n          )}\n        </div>\n      </foreignObject>\n    </React.Fragment>\n  );\n};\n\nexport default MixedNodeElement;\n","import React from 'react';\n\nconst textLayout = {\n  vertical: {\n    title: {\n      textAnchor: 'start',\n      x: 40,\n    },\n    attributes: {},\n    attribute: {\n      x: 40,\n      dy: '1.2em',\n    },\n  },\n  horizontal: {\n    title: {\n      textAnchor: 'start',\n      y: 40,\n    },\n    attributes: {\n      x: 0,\n      y: 40,\n    },\n    attribute: {\n      x: 0,\n      dy: '1.2em',\n    },\n  },\n};\n\nconst PureSvgNodeElement = ({ nodeDatum, orientation, toggleNode, onNodeClick }) => {\n  return (\n    <>\n      <circle r={20} onClick={toggleNode}></circle>\n      <g className=\"rd3t-label\">\n        <text\n          className=\"rd3t-label__title\"\n          {...textLayout[orientation].title}\n          onClick={onNodeClick}\n        >\n          {nodeDatum.name}\n        </text>\n        <text className=\"rd3t-label__attributes\" {...textLayout[orientation].attributes}>\n          {nodeDatum.attributes &&\n            Object.entries(nodeDatum.attributes).map(([labelKey, labelValue], i) => (\n              <tspan key={`${labelKey}-${i}`} {...textLayout[orientation].attribute}>\n                {labelKey}: {labelValue}\n              </tspan>\n            ))}\n        </text>\n      </g>\n    </>\n  );\n};\n\nexport default PureSvgNodeElement;\n","import React, {Component} from 'react';\nimport Tree from 'react-d3-tree';\nimport MixedNodeElement from './MixedNodeElement';\nimport PureSvgNodeElement from './PureSvgNodeElement';\nimport '../App.css';\n\nconst customNodeFnMapping = {\n  svg: {\n    description: 'Default - Pure SVG node & label (IE11 compatible)',\n    fn: (rd3tProps, configs) => (\n      <PureSvgNodeElement\n        nodeDatum={rd3tProps.nodeDatum}\n        toggleNode={rd3tProps.toggleNode}\n        orientation={configs.orientation}\n      />\n    ),\n  },\n  mixed: {\n    description: 'MixedNodeElement - SVG `circle` + `foreignObject` label',\n    fn: ({nodeDatum, toggleNode, configs}) => (\n      <MixedNodeElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        foreignObjectProps={{\n          width: configs.nodeSize.x,\n          height: configs.nodeSize.y,\n          x: -50,\n          y: 50,\n        }}\n      />\n    ),\n  },\n};\n\nclass FamilyTree extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      translateX: 128,\n      translateY: 128,\n    };\n  }\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translateX: dimensions.width / 2.5,\n      translateY: dimensions.height / 2,\n    });\n  }\n\n  render() {\n    const {data, configurations} = this.props;\n    return (\n      <div className=\"App\">\n        <div className=\"demo-container\">\n          <div className=\"column-right\">\n            <div className=\"tree-stats-container\">\n              <h2>{configurations.title}</h2>\n            </div>\n            <div ref={tc => (this.treeContainer = tc)} className=\"tree-container\">\n              <Tree\n                data={data}\n                renderCustomNodeElement={\n                  configurations.renderCustomNodeElement\n                    ? rd3tProps => customNodeFnMapping[configurations.renderCustomNodeElement].fn(rd3tProps, configurations)\n                    : undefined\n                }\n                rootNodeClassName=\"demo-node\"\n                branchNodeClassName=\"demo-node\"\n                orientation={configurations.orientation}\n                translate={{x: this.state.translateX, y: this.state.translateY}}\n                pathFunc={configurations.pathFunc}\n                collapsible={configurations.collapsible}\n                initialDepth={configurations.initialDepth}\n                zoomable={configurations.zoomable}\n                zoom={configurations.zoom}\n                scaleExtent={configurations.scaleExtent}\n                nodeSize={configurations.nodeSize}\n                separation={configurations.separation}\n                enableLegacyTransitions={configurations.enableLegacyTransitions}\n                transitionDuration={configurations.transitionDuration}\n                depthFactor={configurations.depthFactor}\n                styles={configurations.styles}\n                shouldCollapseNeighborNodes={configurations.shouldCollapseNeighborNodes}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FamilyTree;\n","import React, {Component} from 'react';\nimport '../App.css';\nimport FamilyTree from \"./FamilyTree\";\n// Data data\nimport data from './../data/data.json';\nimport configurations from './../data/configurations.json';\n\nclass Viewer extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"demo-container\">\n          <div className=\"column-right\">\n            <FamilyTree data={data} configurations={configurations}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Viewer;\n","import PropTypes from 'prop-types'\nimport React, { Component } from 'react';\nimport './styles.css';\n\nclass Input extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool.isRequired,\n    variable: PropTypes.object\n  };\n\n  render() {\n    const { variable, name, onChange, checked } = this.props;\n    return (\n      <div className='onoffswitch'>\n        <input type='checkbox' className='onoffswitch-checkbox' id={name} name={name}\n          onChange={onChange} checked={checked} {...variable} />\n        <label className='onoffswitch-label' htmlFor={name}>\n          <span className='onoffswitch-inner' />\n          <span className='onoffswitch-switch' />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Input;","import React, {Component} from 'react';\nimport Tree from 'react-d3-tree';\nimport {version} from '../../package.json';\nimport Switch from './Switch';\nimport MixedNodeElement from './MixedNodeElement';\nimport PureSvgNodeElement from './PureSvgNodeElement';\nimport '../App.css';\n// Data data\nimport orgChartJson from './../data/data.json';\n\nconst customNodeFnMapping = {\n  svg: {\n    description: 'Default - Pure SVG node & label (IE11 compatible)',\n    fn: (rd3tProps, appState) => (\n      <PureSvgNodeElement\n        nodeDatum={rd3tProps.nodeDatum}\n        toggleNode={rd3tProps.toggleNode}\n        orientation={appState.orientation}\n      />\n    ),\n  },\n  mixed: {\n    description: 'MixedNodeElement - SVG `circle` + `foreignObject` label',\n    fn: ({nodeDatum, toggleNode}, appState) => (\n      <MixedNodeElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        foreignObjectProps={{\n          width: appState.nodeSize.x,\n          height: appState.nodeSize.y,\n          x: -50,\n          y: 50,\n        }}\n      />\n    ),\n  },\n};\n\nconst countNodes = (count = 0, n) => {\n  // Count the current node\n  count += 1;\n\n  // Base case: reached a leaf node.\n  if (!n.children) {\n    return count;\n  }\n\n  // Keep traversing children while updating `count` until we reach the base case.\n  return n.children.reduce((sum, child) => countNodes(sum, child), count);\n};\n\nclass Editor extends Component {\n  constructor() {\n    super();\n\n    this.addedNodesCount = 0;\n\n    this.state = {\n      data: orgChartJson,\n      totalNodeCount: countNodes(0, Array.isArray(orgChartJson) ? orgChartJson[0] : orgChartJson),\n      title: 'My Family Tree',\n      orientation: 'vertical',\n      translateX: 200,\n      translateY: 300,\n      pathFunc: 'diagonal',\n      collapsible: true,\n      shouldCollapseNeighborNodes: false,\n      initialDepth: 1,\n      depthFactor: null,\n      zoomable: true,\n      zoom: 1,\n      scaleExtent: {min: 0.1, max: 1},\n      separation: {siblings: 2, nonSiblings: 2},\n      nodeSize: {x: 200, y: 200},\n      enableLegacyTransitions: false,\n      transitionDuration: 500,\n      renderCustomNodeElement: 'svg',\n      styles: {\n        nodes: {\n          node: {\n            circle: {\n              fill: '#52e2c5',\n            },\n            attributes: {\n              stroke: '#000',\n            },\n          },\n          leafNode: {\n            circle: {\n              fill: 'transparent',\n            },\n            attributes: {\n              stroke: '#000',\n            },\n          },\n        },\n      },\n    };\n\n    this.setTreeData = this.setTreeData.bind(this);\n    this.setLargeTree = this.setLargeTree.bind(this);\n    this.setTitle = this.setTitle.bind(this);\n    this.setOrientation = this.setOrientation.bind(this);\n    this.setPathFunc = this.setPathFunc.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFloatChange = this.handleFloatChange.bind(this);\n    this.toggleCollapsible = this.toggleCollapsible.bind(this);\n    this.toggleZoomable = this.toggleZoomable.bind(this);\n    this.setScaleExtent = this.setScaleExtent.bind(this);\n    this.setSeparation = this.setSeparation.bind(this);\n    this.setNodeSize = this.setNodeSize.bind(this);\n  }\n\n  setTreeData(data) {\n    this.setState({\n      data,\n      totalNodeCount: countNodes(0, Array.isArray(data) ? data[0] : data),\n    });\n  }\n\n  setLargeTree(data) {\n    this.setState({\n      data,\n      transitionDuration: 0,\n    });\n  }\n\n  setTitle(title) {\n    this.setState({title});\n  }\n\n  setOrientation(orientation) {\n    this.setState({orientation});\n  }\n\n  setPathFunc(pathFunc) {\n    this.setState({pathFunc});\n  }\n\n  handleChange(evt) {\n    const target = evt.target;\n    const parsedIntValue = parseInt(target.value, 10);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedIntValue)) {\n      this.setState({\n        [target.name]: parsedIntValue,\n      });\n    }\n  }\n\n  handleFloatChange(evt) {\n    const target = evt.target;\n    const parsedFloatValue = parseFloat(target.value);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedFloatValue)) {\n      this.setState({\n        [target.name]: parsedFloatValue,\n      });\n    }\n  }\n\n  handleCustomNodeFnChange = evt => {\n    const customNodeKey = evt.target.value;\n\n    this.setState({renderCustomNodeElement: customNodeKey});\n  };\n\n  toggleCollapsible() {\n    this.setState(prevState => ({collapsible: !prevState.collapsible}));\n  }\n\n  toggleCollapseNeighborNodes = () => {\n    this.setState(prevState => ({\n      shouldCollapseNeighborNodes: !prevState.shouldCollapseNeighborNodes,\n    }));\n  };\n\n  toggleZoomable() {\n    this.setState(prevState => ({zoomable: !prevState.zoomable}));\n  }\n\n  setScaleExtent(scaleExtent) {\n    this.setState({scaleExtent});\n  }\n\n  setSeparation(separation) {\n    if (!isNaN(separation.siblings) && !isNaN(separation.nonSiblings)) {\n      this.setState({separation});\n    }\n  }\n\n  setNodeSize(nodeSize) {\n    if (!isNaN(nodeSize.x) && !isNaN(nodeSize.y)) {\n      this.setState({nodeSize});\n    }\n  }\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translateX: dimensions.width / 2.5,\n      translateY: dimensions.height / 2,\n    });\n  }\n\n  generateConfigs = () => ({\n    title: this.state.title,\n    orientation: this.state.orientation,\n    translate: {x: this.state.translateX, y: this.state.translateY},\n    pathFunc: this.state.pathFunc,\n    renderCustomNodeElement: this.state.renderCustomNodeElement,\n    collapsible: this.state.collapsible,\n    initialDepth: this.state.initialDepth,\n    zoomable: this.state.zoomable,\n    zoom: this.state.zoom,\n    scaleExtent: this.state.scaleExtent,\n    nodeSize: this.state.nodeSize,\n    separation: this.state.separation,\n    enableLegacyTransitions: this.state.enableLegacyTransitions,\n    transitionDuration: this.state.transitionDuration,\n    depthFactor: this.state.depthFactor,\n    styles: this.state.styles,\n    shouldCollapseNeighborNodes: this.state.shouldCollapseNeighborNodes,\n  });\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"demo-container\">\n          <div className=\"column-left\">\n            <div className=\"controls-container\">\n              <div className=\"prop-container\">\n                <h2 className=\"title\">Family Tree Editor</h2>\n                <h3 className=\"title\">v{version}</h3>\n                <h4 className=\"prop\">Data (lost when the page is refreshed)</h4>\n                <div style={{marginBottom: '5px'}}>\n                  <textarea style={{width: '100%'}}\n                            rows={12}\n                            value={JSON.stringify(orgChartJson, null, 2)}\n                            onChange={(event) => this.setTreeData(JSON.parse(event.target.value))}/>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-block\"\n                    onClick={() => navigator.clipboard.writeText(JSON.stringify(this.state.data, null, 2))}\n                  >\n                    {'Copy All Data'}\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"prop-container\">\n                <h3 className=\"prop\">Configurations</h3>\n                <textarea style={{width: '100%'}}\n                          value={JSON.stringify(this.generateConfigs(), null, 2)}\n                          disabled={true}/>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-block\"\n                  onClick={() => navigator.clipboard.writeText(JSON.stringify(this.generateConfigs(), null, 2))}\n                >\n                  {'Copy All Configurations'}\n                </button>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Title</h4>\n                <input\n                  type=\"text\"\n                  value={this.state.title}\n                  onChange={(event) => this.setTitle(event)}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Orientation</h4>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setOrientation('horizontal')}\n                >\n                  {'Horizontal'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setOrientation('vertical')}\n                >\n                  {'Vertical'}\n                </button>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Path Function</h4>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('diagonal')}\n                >\n                  {'Diagonal'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('elbow')}\n                >\n                  {'Elbow'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('straight')}\n                >\n                  {'Straight'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('step')}\n                >\n                  {'Step'}\n                </button>\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"customNodeElement\">\n                  Custom Node Element\n                </label>\n                <select className=\"form-control\" onChange={this.handleCustomNodeFnChange}>\n                  {Object.entries(customNodeFnMapping).map(([key, {description}]) => (\n                    <option key={key} value={key}>\n                      {description}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Collapsible</h4>\n                <Switch\n                  name=\"collapsibleBtn\"\n                  checked={this.state.collapsible}\n                  onChange={this.toggleCollapsible}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Collapse neighbor nodes</h4>\n                <Switch\n                  name=\"collapseNeighborsBtn\"\n                  checked={this.state.shouldCollapseNeighborNodes}\n                  onChange={this.toggleCollapseNeighborNodes}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Enable Legacy Transitions</h4>\n                <Switch\n                  name=\"enableLegacyTransitionsBtn\"\n                  checked={this.state.enableLegacyTransitions}\n                  onChange={() =>\n                    this.setState(prevState => ({\n                      enableLegacyTransitions: !prevState.enableLegacyTransitions,\n                    }))\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <div>\n                  <label className=\"prop\" htmlFor=\"translateX\">\n                    Translate X\n                  </label>\n                  <input\n                    className=\"form-control\"\n                    name=\"translateX\"\n                    type=\"number\"\n                    value={this.state.translateX}\n                    onChange={this.handleChange}\n                  />\n                </div>\n                <div>\n                  <label className=\"prop\" htmlFor=\"translateY\">\n                    Translate Y\n                  </label>\n                  <input\n                    className=\"form-control\"\n                    name=\"translateY\"\n                    type=\"number\"\n                    value={this.state.translateY}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"initialDepth\">\n                  Initial Depth\n                </label>\n                <input\n                  className=\"form-control\"\n                  style={{color: 'grey'}}\n                  name=\"initialDepth\"\n                  type=\"text\"\n                  value={this.state.initialDepth}\n                  onChange={this.handleChange}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"depthFactor\">\n                  Depth Factor\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"depthFactor\"\n                  type=\"number\"\n                  defaultValue={this.state.depthFactor}\n                  onChange={this.handleChange}\n                />\n              </div>\n\n              {/* <div className=\"prop-container prop\">{`Zoomable: ${this.state.zoomable}`}</div> */}\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"zoom\">\n                  Zoom\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"zoom\"\n                  type=\"number\"\n                  defaultValue={this.state.zoom}\n                  onChange={this.handleFloatChange}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Scale Extent</span>\n                <label className=\"sub-prop\" htmlFor=\"scaleExtentMin\">\n                  Min\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"scaleExtentMin\"\n                  type=\"number\"\n                  defaultValue={this.state.scaleExtent.min}\n                  onChange={evt =>\n                    this.setScaleExtent({\n                      min: parseFloat(evt.target.value),\n                      max: this.state.scaleExtent.max,\n                    })\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"scaleExtentMax\">\n                  Max\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"scaleExtentMax\"\n                  type=\"number\"\n                  defaultValue={this.state.scaleExtent.max}\n                  onChange={evt =>\n                    this.setScaleExtent({\n                      min: this.state.scaleExtent.min,\n                      max: parseFloat(evt.target.value),\n                    })\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Node separation</span>\n                <label className=\"sub-prop\" htmlFor=\"separationSiblings\">\n                  Siblings\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"separationSiblings\"\n                  type=\"number\"\n                  defaultValue={this.state.separation.siblings}\n                  onChange={evt =>\n                    this.setSeparation({\n                      siblings: parseFloat(evt.target.value),\n                      nonSiblings: this.state.separation.nonSiblings,\n                    })\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"separationNonSiblings\">\n                  Non-Siblings\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"separationNonSiblings\"\n                  type=\"number\"\n                  defaultValue={this.state.separation.nonSiblings}\n                  onChange={evt =>\n                    this.setSeparation({\n                      siblings: this.state.separation.siblings,\n                      nonSiblings: parseFloat(evt.target.value),\n                    })\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Node size</span>\n                <label className=\"sub-prop\" htmlFor=\"nodeSizeX\">\n                  X\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"nodeSizeX\"\n                  type=\"number\"\n                  defaultValue={this.state.nodeSize.x}\n                  onChange={evt =>\n                    this.setNodeSize({x: parseFloat(evt.target.value), y: this.state.nodeSize.y})\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"nodeSizeY\">\n                  Y\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"nodeSizeY\"\n                  type=\"number\"\n                  defaultValue={this.state.nodeSize.y}\n                  onChange={evt =>\n                    this.setNodeSize({x: this.state.nodeSize.x, y: parseFloat(evt.target.value)})\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"transitionDuration\">\n                  Transition Duration\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"transitionDuration\"\n                  type=\"number\"\n                  value={this.state.transitionDuration}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"column-right\">\n            <div className=\"tree-stats-container\">\n              Total nodes in tree: {this.state.totalNodeCount}\n            </div>\n            <div ref={tc => (this.treeContainer = tc)} className=\"tree-container\">\n              <Tree\n                data={this.state.data}\n                renderCustomNodeElement={\n                  this.state.renderCustomNodeElement\n                    ? rd3tProps => customNodeFnMapping[this.state.renderCustomNodeElement].fn(rd3tProps, this.state)\n                    : undefined\n                }\n                rootNodeClassName=\"demo-node\"\n                branchNodeClassName=\"demo-node\"\n                orientation={this.state.orientation}\n                translate={{x: this.state.translateX, y: this.state.translateY}}\n                pathFunc={this.state.pathFunc}\n                collapsible={this.state.collapsible}\n                initialDepth={this.state.initialDepth}\n                zoomable={this.state.zoomable}\n                zoom={this.state.zoom}\n                scaleExtent={this.state.scaleExtent}\n                nodeSize={this.state.nodeSize}\n                separation={this.state.separation}\n                enableLegacyTransitions={this.state.enableLegacyTransitions}\n                transitionDuration={this.state.transitionDuration}\n                depthFactor={this.state.depthFactor}\n                styles={this.state.styles}\n                shouldCollapseNeighborNodes={this.state.shouldCollapseNeighborNodes}\n                // onUpdate={(...args) => {console.log(args)}}\n                onNodeClick={(...args) => {\n                  console.log('onNodeClick');\n                  console.log(args);\n                }}\n                onNodeMouseOver={(...args) => {\n                  console.log('onNodeMouseOver', args);\n                }}\n                onNodeMouseOut={(...args) => {\n                  console.log('onNodeMouseOut', args);\n                }}\n                onLinkClick={(...args) => {\n                  console.log(args);\n                }}\n                onLinkMouseOver={(...args) => {\n                  console.log('onLinkMouseOver', args);\n                }}\n                onLinkMouseOut={(...args) => {\n                  console.log('onLinkMouseOut', args);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Editor;\n","import React from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Viewer from \"./components/Viewer\";\nimport Editor from \"./components/Editor\";\n\nconsole.log('Demo React version: ', React.version);\n\nexport default function AppRouter() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/editor\">\n            <Editor/>\n          </Route>\n          <Route path=\"/\">\n            <Viewer/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppRouter from \"./AppRouter\";\n\nReactDOM.render(\n  <AppRouter />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}