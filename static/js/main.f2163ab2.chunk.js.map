{"version":3,"sources":["components/Switch/index.js","components/MixedNodeElement.js","components/PureSvgNodeElement.js","App.js","index.js"],"names":["Input","this","props","variable","name","onChange","checked","className","type","id","htmlFor","Component","MixedNodeElement","nodeData","triggerNodeToggle","foreignObjectProps","Fragment","r","style","display","flexDirection","alignItems","border","paddingBottom","backgroundColor","listStyleType","padding","attributes","Object","keys","map","labelKey","i","key","children","textAlign","onClick","__rd3t","collapsed","textLayout","vertical","title","textAnchor","x","attribute","dy","horizontal","y","PureSvgNodeElement","nodeDatum","orientation","toggleNode","onNodeClick","entries","labelValue","console","log","React","version","customNodeFnMapping","svg","description","fn","rd3tProps","appState","mixed","width","nodeSize","height","countNodes","count","n","reduce","sum","child","App","handleCustomNodeFnChange","evt","customNodeKey","target","value","setState","renderCustomNodeElement","toggleCollapseNeighborNodes","prevState","shouldCollapseNeighborNodes","addChildNode","data","clone","state","_children","addedNodesCount","push","removeChildNode","pop","handleNodeClick","orgChartJson","totalNodeCount","Array","isArray","translateX","translateY","collapsible","initialDepth","depthFactor","undefined","zoomable","zoom","scaleExtent","min","max","separation","siblings","nonSiblings","enableLegacyTransitions","transitionDuration","styles","nodes","node","circle","fill","stroke","leafNode","setTreeData","bind","setLargeTree","setOrientation","setPathFunc","handleChange","handleFloatChange","toggleCollapsible","toggleZoomable","setScaleExtent","setSeparation","setNodeSize","pathFunc","parsedIntValue","parseInt","isNaN","parsedFloatValue","parseFloat","dimensions","treeContainer","getBoundingClientRect","href","role","aria-label","marginBottom","event","JSON","parse","stringify","Switch","color","defaultValue","ref","tc","rootNodeClassName","branchNodeClassName","translate","args","onNodeMouseOver","onNodeMouseOut","onLinkClick","onLinkMouseOver","onLinkMouseOut","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2163ab2.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react';\nimport './styles.css';\n\nclass Input extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool.isRequired,\n    variable: PropTypes.object\n  };\n\n  render() {\n    const { variable, name, onChange, checked } = this.props;\n    return (\n      <div className='onoffswitch'>\n        <input type='checkbox' className='onoffswitch-checkbox' id={name} name={name}\n          onChange={onChange} checked={checked} {...variable} />\n        <label className='onoffswitch-label' htmlFor={name}>\n          <span className='onoffswitch-inner' />\n          <span className='onoffswitch-switch' />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Input;","import React from 'react';\n\nconst MixedNodeElement = ({ nodeData = {}, triggerNodeToggle, foreignObjectProps = {} }) => {\n  return (\n    <React.Fragment>\n      <circle r={20}></circle>\n      <foreignObject {...foreignObjectProps}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            border: '1px solid black',\n            paddingBottom: '1rem',\n            backgroundColor: 'rgb(248, 248, 255)', // ghostwhite\n          }}\n        >\n          <h3>{nodeData.name}</h3>\n          <ul style={{ listStyleType: 'none', padding: 0 }}>\n            {nodeData.attributes &&\n              Object.keys(nodeData.attributes).map((labelKey, i) => (\n                <li key={`${labelKey}-${i}`}>\n                  {labelKey}: {nodeData.attributes[labelKey]}\n                </li>\n              ))}\n          </ul>\n          {nodeData.children && (\n            <button style={{ textAlign: 'center' }} onClick={triggerNodeToggle}>\n              {nodeData.__rd3t.collapsed ? '⬅️ ➡️ Expand' : '➡️ ⬅️ Collapse'}\n            </button>\n          )}\n        </div>\n      </foreignObject>\n    </React.Fragment>\n  );\n};\n\nexport default MixedNodeElement;\n","import React from 'react';\n\nconst textLayout = {\n  vertical: {\n    title: {\n      textAnchor: 'start',\n      x: 40,\n    },\n    attributes: {},\n    attribute: {\n      x: 40,\n      dy: '1.2em',\n    },\n  },\n  horizontal: {\n    title: {\n      textAnchor: 'start',\n      y: 40,\n    },\n    attributes: {\n      x: 0,\n      y: 40,\n    },\n    attribute: {\n      x: 0,\n      dy: '1.2em',\n    },\n  },\n};\n\nconst PureSvgNodeElement = ({ nodeDatum, orientation, toggleNode, onNodeClick }) => {\n  return (\n    <>\n      <circle r={20} onClick={toggleNode}></circle>\n      <g className=\"rd3t-label\">\n        <text\n          className=\"rd3t-label__title\"\n          {...textLayout[orientation].title}\n          onClick={onNodeClick}\n        >\n          {nodeDatum.name}\n        </text>\n        <text className=\"rd3t-label__attributes\" {...textLayout[orientation].attributes}>\n          {nodeDatum.attributes &&\n            Object.entries(nodeDatum.attributes).map(([labelKey, labelValue], i) => (\n              <tspan key={`${labelKey}-${i}`} {...textLayout[orientation].attribute}>\n                {labelKey}: {labelValue}\n              </tspan>\n            ))}\n        </text>\n      </g>\n    </>\n  );\n};\n\nexport default PureSvgNodeElement;\n","import React, { Component } from 'react';\nimport clone from 'clone';\nimport Tree from 'react-d3-tree';\nimport { version } from './../package.json';\nimport Switch from './components/Switch';\nimport MixedNodeElement from './components/MixedNodeElement';\nimport PureSvgNodeElement from './components/PureSvgNodeElement';\nimport './App.css';\n\n// Data examples\nimport orgChartJson from './examples/org-chart.json';\n\nconsole.log('Demo React version: ', React.version);\n\nconst customNodeFnMapping = {\n  svg: {\n    description: 'Default - Pure SVG node & label (IE11 compatible)',\n    fn: (rd3tProps, appState) => (\n      <PureSvgNodeElement\n        nodeDatum={rd3tProps.nodeDatum}\n        toggleNode={rd3tProps.toggleNode}\n        orientation={appState.orientation}\n      />\n    ),\n  },\n  mixed: {\n    description: 'MixedNodeElement - SVG `circle` + `foreignObject` label',\n    fn: ({ nodeDatum, toggleNode }, appState) => (\n      <MixedNodeElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        foreignObjectProps={{\n          width: appState.nodeSize.x,\n          height: appState.nodeSize.y,\n          x: -50,\n          y: 50,\n        }}\n      />\n    ),\n  },\n};\n\nconst countNodes = (count = 0, n) => {\n  // Count the current node\n  count += 1;\n\n  // Base case: reached a leaf node.\n  if (!n.children) {\n    return count;\n  }\n\n  // Keep traversing children while updating `count` until we reach the base case.\n  return n.children.reduce((sum, child) => countNodes(sum, child), count);\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.addedNodesCount = 0;\n\n    this.state = {\n      data: orgChartJson,\n      totalNodeCount: countNodes(0, Array.isArray(orgChartJson) ? orgChartJson[0] : orgChartJson),\n      orientation: 'vertical',\n      translateX: 200,\n      translateY: 300,\n      collapsible: true,\n      shouldCollapseNeighborNodes: false,\n      initialDepth: 1,\n      depthFactor: undefined,\n      zoomable: true,\n      zoom: 1,\n      scaleExtent: { min: 0.1, max: 1 },\n      separation: { siblings: 2, nonSiblings: 2 },\n      nodeSize: { x: 200, y: 200 },\n      enableLegacyTransitions: false,\n      transitionDuration: 500,\n      renderCustomNodeElement: customNodeFnMapping['svg'].fn,\n      styles: {\n        nodes: {\n          node: {\n            circle: {\n              fill: '#52e2c5',\n            },\n            attributes: {\n              stroke: '#000',\n            },\n          },\n          leafNode: {\n            circle: {\n              fill: 'transparent',\n            },\n            attributes: {\n              stroke: '#000',\n            },\n          },\n        },\n      },\n    };\n\n    this.setTreeData = this.setTreeData.bind(this);\n    this.setLargeTree = this.setLargeTree.bind(this);\n    this.setOrientation = this.setOrientation.bind(this);\n    this.setPathFunc = this.setPathFunc.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFloatChange = this.handleFloatChange.bind(this);\n    this.toggleCollapsible = this.toggleCollapsible.bind(this);\n    this.toggleZoomable = this.toggleZoomable.bind(this);\n    this.setScaleExtent = this.setScaleExtent.bind(this);\n    this.setSeparation = this.setSeparation.bind(this);\n    this.setNodeSize = this.setNodeSize.bind(this);\n  }\n\n  setTreeData(data) {\n    this.setState({\n      data,\n      totalNodeCount: countNodes(0, Array.isArray(data) ? data[0] : data),\n    });\n  }\n\n  setLargeTree(data) {\n    this.setState({\n      data,\n      transitionDuration: 0,\n    });\n  }\n\n  setOrientation(orientation) {\n    this.setState({ orientation });\n  }\n\n  setPathFunc(pathFunc) {\n    this.setState({ pathFunc });\n  }\n\n  handleChange(evt) {\n    const target = evt.target;\n    const parsedIntValue = parseInt(target.value, 10);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedIntValue)) {\n      this.setState({\n        [target.name]: parsedIntValue,\n      });\n    }\n  }\n\n  handleFloatChange(evt) {\n    const target = evt.target;\n    const parsedFloatValue = parseFloat(target.value);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedFloatValue)) {\n      this.setState({\n        [target.name]: parsedFloatValue,\n      });\n    }\n  }\n\n  handleCustomNodeFnChange = evt => {\n    const customNodeKey = evt.target.value;\n\n    this.setState({ renderCustomNodeElement: customNodeFnMapping[customNodeKey].fn });\n  };\n\n  toggleCollapsible() {\n    this.setState(prevState => ({ collapsible: !prevState.collapsible }));\n  }\n\n  toggleCollapseNeighborNodes = () => {\n    this.setState(prevState => ({\n      shouldCollapseNeighborNodes: !prevState.shouldCollapseNeighborNodes,\n    }));\n  };\n\n  toggleZoomable() {\n    this.setState(prevState => ({ zoomable: !prevState.zoomable }));\n  }\n\n  setScaleExtent(scaleExtent) {\n    this.setState({ scaleExtent });\n  }\n\n  setSeparation(separation) {\n    if (!isNaN(separation.siblings) && !isNaN(separation.nonSiblings)) {\n      this.setState({ separation });\n    }\n  }\n\n  setNodeSize(nodeSize) {\n    if (!isNaN(nodeSize.x) && !isNaN(nodeSize.y)) {\n      this.setState({ nodeSize });\n    }\n  }\n\n  addChildNode = () => {\n    const data = clone(this.state.data);\n    const target = data[0].children ? data[0].children : data[0]._children;\n    this.addedNodesCount++;\n    target.push({\n      name: `Inserted Node ${this.addedNodesCount}`,\n      id: `inserted-node-${this.addedNodesCount}`,\n    });\n    this.setState({\n      data,\n    });\n  };\n\n  removeChildNode = () => {\n    const data = clone(this.state.data);\n    const target = data[0].children ? data[0].children : data[0]._children;\n    target.pop();\n    this.addedNodesCount--;\n    this.setState({\n      data,\n    });\n  };\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translateX: dimensions.width / 2.5,\n      translateY: dimensions.height / 2,\n    });\n  }\n\n  handleNodeClick = () => {\n    console.log(this.state);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"demo-container\">\n          <div className=\"column-left\">\n            <div className=\"controls-container\">\n              <div className=\"prop-container\">\n                <h2 className=\"title\">Family Tree</h2>\n                <h3 className=\"title\">v{version}</h3>\n                <h3 className=\"title\">\n                  <a href=\"/family-tree/docs\"><span role=\"img\" aria-label=\"document\">📖</span> API Docs (v2)</a>\n                </h3>\n                <h4 className=\"prop\">Data (lost when the page is refreshed)</h4>\n                <div style={{ marginBottom: '5px' }}>\n                  <textarea onChange={(event) => this.setTreeData(JSON.parse(event.target.value))}>{JSON.stringify(orgChartJson, null, 2)}</textarea>\n                </div>\n              </div>\n\n              {/* <div className=\"prop-container\">\n                <h4 className=\"prop\">\n                  Dynamically updating <code>data</code>\n                </h4>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.addChildNode()}\n                >\n                  Insert Node\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.removeChildNode()}\n                >\n                  Remove Node\n                </button>\n              </div> */}\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Orientation</h4>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setOrientation('horizontal')}\n                >\n                  {'Horizontal'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setOrientation('vertical')}\n                >\n                  {'Vertical'}\n                </button>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Path Function</h4>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('diagonal')}\n                >\n                  {'Diagonal'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('elbow')}\n                >\n                  {'Elbow'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('straight')}\n                >\n                  {'Straight'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('step')}\n                >\n                  {'Step'}\n                </button>\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"customNodeElement\">\n                  Custom Node Element\n                </label>\n                <select className=\"form-control\" onChange={this.handleCustomNodeFnChange}>\n                  {Object.entries(customNodeFnMapping).map(([key, { description }]) => (\n                    <option key={key} value={key}>\n                      {description}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Collapsible</h4>\n                <Switch\n                  name=\"collapsibleBtn\"\n                  checked={this.state.collapsible}\n                  onChange={this.toggleCollapsible}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Collapse neighbor nodes</h4>\n                <Switch\n                  name=\"collapseNeighborsBtn\"\n                  checked={this.state.shouldCollapseNeighborNodes}\n                  onChange={this.toggleCollapseNeighborNodes}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Enable Legacy Transitions</h4>\n                <Switch\n                  name=\"enableLegacyTransitionsBtn\"\n                  checked={this.state.enableLegacyTransitions}\n                  onChange={() =>\n                    this.setState(prevState => ({\n                      enableLegacyTransitions: !prevState.enableLegacyTransitions,\n                    }))\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <div>\n                  <label className=\"prop\" htmlFor=\"translateX\">\n                    Translate X\n                  </label>\n                  <input\n                    className=\"form-control\"\n                    name=\"translateX\"\n                    type=\"number\"\n                    value={this.state.translateX}\n                    onChange={this.handleChange}\n                  />\n                </div>\n                <div>\n                  <label className=\"prop\" htmlFor=\"translateY\">\n                    Translate Y\n                  </label>\n                  <input\n                    className=\"form-control\"\n                    name=\"translateY\"\n                    type=\"number\"\n                    value={this.state.translateY}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"initialDepth\">\n                  Initial Depth\n                </label>\n                <input\n                  className=\"form-control\"\n                  style={{ color: 'grey' }}\n                  name=\"initialDepth\"\n                  type=\"text\"\n                  value={this.state.initialDepth}\n                  onChange={this.handleChange}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"depthFactor\">\n                  Depth Factor\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"depthFactor\"\n                  type=\"number\"\n                  defaultValue={this.state.depthFactor}\n                  onChange={this.handleChange}\n                />\n              </div>\n\n              {/* <div className=\"prop-container prop\">{`Zoomable: ${this.state.zoomable}`}</div> */}\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"zoom\">\n                  Zoom\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"zoom\"\n                  type=\"number\"\n                  defaultValue={this.state.zoom}\n                  onChange={this.handleFloatChange}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Scale Extent</span>\n                <label className=\"sub-prop\" htmlFor=\"scaleExtentMin\">\n                  Min\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"scaleExtentMin\"\n                  type=\"number\"\n                  defaultValue={this.state.scaleExtent.min}\n                  onChange={evt =>\n                    this.setScaleExtent({\n                      min: parseFloat(evt.target.value),\n                      max: this.state.scaleExtent.max,\n                    })\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"scaleExtentMax\">\n                  Max\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"scaleExtentMax\"\n                  type=\"number\"\n                  defaultValue={this.state.scaleExtent.max}\n                  onChange={evt =>\n                    this.setScaleExtent({\n                      min: this.state.scaleExtent.min,\n                      max: parseFloat(evt.target.value),\n                    })\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Node separation</span>\n                <label className=\"sub-prop\" htmlFor=\"separationSiblings\">\n                  Siblings\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"separationSiblings\"\n                  type=\"number\"\n                  defaultValue={this.state.separation.siblings}\n                  onChange={evt =>\n                    this.setSeparation({\n                      siblings: parseFloat(evt.target.value),\n                      nonSiblings: this.state.separation.nonSiblings,\n                    })\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"separationNonSiblings\">\n                  Non-Siblings\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"separationNonSiblings\"\n                  type=\"number\"\n                  defaultValue={this.state.separation.nonSiblings}\n                  onChange={evt =>\n                    this.setSeparation({\n                      siblings: this.state.separation.siblings,\n                      nonSiblings: parseFloat(evt.target.value),\n                    })\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Node size</span>\n                <label className=\"sub-prop\" htmlFor=\"nodeSizeX\">\n                  X\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"nodeSizeX\"\n                  type=\"number\"\n                  defaultValue={this.state.nodeSize.x}\n                  onChange={evt =>\n                    this.setNodeSize({ x: parseFloat(evt.target.value), y: this.state.nodeSize.y })\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"nodeSizeY\">\n                  Y\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"nodeSizeY\"\n                  type=\"number\"\n                  defaultValue={this.state.nodeSize.y}\n                  onChange={evt =>\n                    this.setNodeSize({ x: this.state.nodeSize.x, y: parseFloat(evt.target.value) })\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"transitionDuration\">\n                  Transition Duration\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"transitionDuration\"\n                  type=\"number\"\n                  value={this.state.transitionDuration}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"column-right\">\n            <div className=\"tree-stats-container\">\n              Total nodes in tree: {this.state.totalNodeCount}\n            </div>\n            <div ref={tc => (this.treeContainer = tc)} className=\"tree-container\">\n              <Tree\n                data={this.state.data}\n                renderCustomNodeElement={\n                  this.state.renderCustomNodeElement\n                    ? rd3tProps => this.state.renderCustomNodeElement(rd3tProps, this.state)\n                    : undefined\n                }\n                rootNodeClassName=\"demo-node\"\n                branchNodeClassName=\"demo-node\"\n                orientation={this.state.orientation}\n                translate={{ x: this.state.translateX, y: this.state.translateY }}\n                pathFunc={this.state.pathFunc}\n                collapsible={this.state.collapsible}\n                initialDepth={this.state.initialDepth}\n                zoomable={this.state.zoomable}\n                zoom={this.state.zoom}\n                scaleExtent={this.state.scaleExtent}\n                nodeSize={this.state.nodeSize}\n                separation={this.state.separation}\n                enableLegacyTransitions={this.state.enableLegacyTransitions}\n                transitionDuration={this.state.transitionDuration}\n                depthFactor={this.state.depthFactor}\n                styles={this.state.styles}\n                shouldCollapseNeighborNodes={this.state.shouldCollapseNeighborNodes}\n                // onUpdate={(...args) => {console.log(args)}}\n                onNodeClick={(...args) => {\n                  console.log('onNodeClick');\n                  console.log(args);\n                }}\n                onNodeMouseOver={(...args) => {\n                  console.log('onNodeMouseOver', args);\n                }}\n                onNodeMouseOut={(...args) => {\n                  console.log('onNodeMouseOut', args);\n                }}\n                onLinkClick={(...args) => {\n                  console.log('onLinkClick');\n                  console.log(args);\n                }}\n                onLinkMouseOver={(...args) => {\n                  console.log('onLinkMouseOver', args);\n                }}\n                onLinkMouseOut={(...args) => {\n                  console.log('onLinkMouseOut', args);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}