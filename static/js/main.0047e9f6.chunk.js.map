{"version":3,"sources":["components/Switch/index.js","components/MixedNodeElement.js","components/PureSvgNodeElement.js","components/Editor.js","components/FamilyTree.js","components/Viewer.js","App.js","index.js"],"names":["Input","this","props","variable","name","onChange","checked","className","type","id","htmlFor","Component","MixedNodeElement","nodeData","triggerNodeToggle","foreignObjectProps","Fragment","r","style","display","flexDirection","alignItems","border","paddingBottom","backgroundColor","listStyleType","padding","attributes","Object","keys","map","labelKey","i","key","children","textAlign","onClick","__rd3t","collapsed","textLayout","vertical","title","textAnchor","x","attribute","dy","horizontal","y","PureSvgNodeElement","nodeDatum","orientation","toggleNode","onNodeClick","entries","labelValue","orgChartJson","data","tree","customNodeFnMapping","svg","description","fn","rd3tProps","appState","mixed","width","nodeSize","height","countNodes","count","n","reduce","sum","child","Editor","handleCustomNodeFnChange","evt","customNodeKey","target","value","setState","renderCustomNodeElement","toggleCollapseNeighborNodes","prevState","shouldCollapseNeighborNodes","generateConfigs","state","translate","translateX","translateY","pathFunc","collapsible","initialDepth","zoomable","zoom","scaleExtent","separation","enableLegacyTransitions","transitionDuration","depthFactor","styles","generateDataAndConfigurations","configurations","totalNodeCount","Array","isArray","min","max","siblings","nonSiblings","nodes","node","circle","fill","stroke","leafNode","setTreeData","bind","setLargeTree","setTitle","setOrientation","setPathFunc","handleChange","handleFloatChange","toggleCollapsible","toggleZoomable","setScaleExtent","setSeparation","setNodeSize","parsedIntValue","parseInt","undefined","isNaN","parsedFloatValue","parseFloat","dimensions","treeContainer","getBoundingClientRect","version","href","repositoryLink","JSON","stringify","disabled","navigator","clipboard","writeText","marginBottom","rows","event","parse","Switch","color","defaultValue","ref","tc","rootNodeClassName","branchNodeClassName","console","log","args","onNodeMouseOver","onNodeMouseOut","onLinkClick","onLinkMouseOver","onLinkMouseOut","configs","FamilyTree","Viewer","App","editMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0047e9f6.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react';\nimport './styles.css';\n\nclass Input extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool.isRequired,\n    variable: PropTypes.object\n  };\n\n  render() {\n    const { variable, name, onChange, checked } = this.props;\n    return (\n      <div className='onoffswitch'>\n        <input type='checkbox' className='onoffswitch-checkbox' id={name} name={name}\n          onChange={onChange} checked={checked} {...variable} />\n        <label className='onoffswitch-label' htmlFor={name}>\n          <span className='onoffswitch-inner' />\n          <span className='onoffswitch-switch' />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Input;","import React from 'react';\n\nconst MixedNodeElement = ({ nodeData = {}, triggerNodeToggle, foreignObjectProps = {} }) => {\n  return (\n    <React.Fragment>\n      <circle r={20}></circle>\n      <foreignObject {...foreignObjectProps}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            border: '1px solid black',\n            paddingBottom: '1rem',\n            backgroundColor: 'rgb(248, 248, 255)', // ghostwhite\n          }}\n        >\n          <h3>{nodeData.name}</h3>\n          <ul style={{ listStyleType: 'none', padding: 0 }}>\n            {nodeData.attributes &&\n              Object.keys(nodeData.attributes).map((labelKey, i) => (\n                <li key={`${labelKey}-${i}`}>\n                  {labelKey}: {nodeData.attributes[labelKey]}\n                </li>\n              ))}\n          </ul>\n          {nodeData.children && (\n            <button style={{ textAlign: 'center' }} onClick={triggerNodeToggle}>\n              {nodeData.__rd3t.collapsed ? '⬅️ ➡️ Expand' : '➡️ ⬅️ Collapse'}\n            </button>\n          )}\n        </div>\n      </foreignObject>\n    </React.Fragment>\n  );\n};\n\nexport default MixedNodeElement;\n","import React from 'react';\n\nconst textLayout = {\n  vertical: {\n    title: {\n      textAnchor: 'start',\n      x: 40,\n    },\n    attributes: {},\n    attribute: {\n      x: 40,\n      dy: '1.2em',\n    },\n  },\n  horizontal: {\n    title: {\n      textAnchor: 'start',\n      y: 40,\n    },\n    attributes: {\n      x: 0,\n      y: 40,\n    },\n    attribute: {\n      x: 0,\n      dy: '1.2em',\n    },\n  },\n};\n\nconst PureSvgNodeElement = ({ nodeDatum, orientation, toggleNode, onNodeClick }) => {\n  return (\n    <>\n      <circle r={20} onClick={toggleNode}></circle>\n      <g className=\"rd3t-label\">\n        <text\n          className=\"rd3t-label__title\"\n          {...textLayout[orientation].title}\n          onClick={onNodeClick}\n        >\n          {nodeDatum.name}\n        </text>\n        <text className=\"rd3t-label__attributes\" {...textLayout[orientation].attributes}>\n          {nodeDatum.attributes &&\n            Object.entries(nodeDatum.attributes).map(([labelKey, labelValue], i) => (\n              <tspan key={`${labelKey}-${i}`} {...textLayout[orientation].attribute}>\n                {labelKey}: {labelValue}\n              </tspan>\n            ))}\n        </text>\n      </g>\n    </>\n  );\n};\n\nexport default PureSvgNodeElement;\n","import React, {Component} from 'react';\nimport Tree from 'react-d3-tree';\nimport {version} from '../../package.json';\nimport Switch from './Switch';\nimport MixedNodeElement from './MixedNodeElement';\nimport PureSvgNodeElement from './PureSvgNodeElement';\nimport '../App.css';\n// Data data\nimport data from './../data/data.json';\n\nconst orgChartJson = data.tree;\n\nconst customNodeFnMapping = {\n  svg: {\n    description: 'Default - Pure SVG node & label (IE11 compatible)',\n    fn: (rd3tProps, appState) => (\n      <PureSvgNodeElement\n        nodeDatum={rd3tProps.nodeDatum}\n        toggleNode={rd3tProps.toggleNode}\n        orientation={appState.orientation}\n      />\n    ),\n  },\n  mixed: {\n    description: 'MixedNodeElement - SVG `circle` + `foreignObject` label',\n    fn: ({nodeDatum, toggleNode}, appState) => (\n      <MixedNodeElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        foreignObjectProps={{\n          width: appState.nodeSize.x,\n          height: appState.nodeSize.y,\n          x: -50,\n          y: 50,\n        }}\n      />\n    ),\n  },\n};\n\nconst countNodes = (count = 0, n) => {\n  // Count the current node\n  count += 1;\n\n  // Base case: reached a leaf node.\n  if (!n.children) {\n    return count;\n  }\n\n  // Keep traversing children while updating `count` until we reach the base case.\n  return n.children.reduce((sum, child) => countNodes(sum, child), count);\n};\n\nclass Editor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: orgChartJson,\n      totalNodeCount: countNodes(0, Array.isArray(orgChartJson) ? orgChartJson[0] : orgChartJson),\n      title: 'My Family Tree',\n      orientation: 'vertical',\n      translateX: 200,\n      translateY: 300,\n      pathFunc: 'diagonal',\n      collapsible: true,\n      shouldCollapseNeighborNodes: false,\n      initialDepth: 1,\n      depthFactor: null,\n      zoomable: true,\n      zoom: 1,\n      scaleExtent: {min: 0.1, max: 1},\n      separation: {siblings: 2, nonSiblings: 2},\n      nodeSize: {x: 200, y: 200},\n      enableLegacyTransitions: false,\n      transitionDuration: 500,\n      renderCustomNodeElement: 'svg',\n      styles: {\n        nodes: {\n          node: {\n            circle: {\n              fill: '#52e2c5',\n            },\n            attributes: {\n              stroke: '#000',\n            },\n          },\n          leafNode: {\n            circle: {\n              fill: 'transparent',\n            },\n            attributes: {\n              stroke: '#000',\n            },\n          },\n        },\n      },\n    };\n\n    this.setTreeData = this.setTreeData.bind(this);\n    this.setLargeTree = this.setLargeTree.bind(this);\n    this.setTitle = this.setTitle.bind(this);\n    this.setOrientation = this.setOrientation.bind(this);\n    this.setPathFunc = this.setPathFunc.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFloatChange = this.handleFloatChange.bind(this);\n    this.toggleCollapsible = this.toggleCollapsible.bind(this);\n    this.toggleZoomable = this.toggleZoomable.bind(this);\n    this.setScaleExtent = this.setScaleExtent.bind(this);\n    this.setSeparation = this.setSeparation.bind(this);\n    this.setNodeSize = this.setNodeSize.bind(this);\n  }\n\n  setTreeData(data) {\n    this.setState({\n      data,\n      totalNodeCount: countNodes(0, Array.isArray(data) ? data[0] : data),\n    });\n  }\n\n  setLargeTree(data) {\n    this.setState({\n      data,\n      transitionDuration: 0,\n    });\n  }\n\n  setTitle(title) {\n    this.setState({title});\n  }\n\n  setOrientation(orientation) {\n    this.setState({orientation});\n  }\n\n  setPathFunc(pathFunc) {\n    this.setState({pathFunc});\n  }\n\n  handleChange(evt) {\n    const target = evt.target;\n    const parsedIntValue = parseInt(target.value, 10);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedIntValue)) {\n      this.setState({\n        [target.name]: parsedIntValue,\n      });\n    }\n  }\n\n  handleFloatChange(evt) {\n    const target = evt.target;\n    const parsedFloatValue = parseFloat(target.value);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedFloatValue)) {\n      this.setState({\n        [target.name]: parsedFloatValue,\n      });\n    }\n  }\n\n  handleCustomNodeFnChange = evt => {\n    const customNodeKey = evt.target.value;\n\n    this.setState({renderCustomNodeElement: customNodeKey});\n  };\n\n  toggleCollapsible() {\n    this.setState(prevState => ({collapsible: !prevState.collapsible}));\n  }\n\n  toggleCollapseNeighborNodes = () => {\n    this.setState(prevState => ({\n      shouldCollapseNeighborNodes: !prevState.shouldCollapseNeighborNodes,\n    }));\n  };\n\n  toggleZoomable() {\n    this.setState(prevState => ({zoomable: !prevState.zoomable}));\n  }\n\n  setScaleExtent(scaleExtent) {\n    this.setState({scaleExtent});\n  }\n\n  setSeparation(separation) {\n    if (!isNaN(separation.siblings) && !isNaN(separation.nonSiblings)) {\n      this.setState({separation});\n    }\n  }\n\n  setNodeSize(nodeSize) {\n    if (!isNaN(nodeSize.x) && !isNaN(nodeSize.y)) {\n      this.setState({nodeSize});\n    }\n  }\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translateX: dimensions.width / 2.5,\n      translateY: dimensions.height / 2,\n    });\n  }\n\n  generateConfigs = () => ({\n    title: this.state.title,\n    orientation: this.state.orientation,\n    translate: {x: this.state.translateX, y: this.state.translateY},\n    pathFunc: this.state.pathFunc,\n    renderCustomNodeElement: this.state.renderCustomNodeElement,\n    collapsible: this.state.collapsible,\n    initialDepth: this.state.initialDepth,\n    zoomable: this.state.zoomable,\n    zoom: this.state.zoom,\n    scaleExtent: this.state.scaleExtent,\n    nodeSize: this.state.nodeSize,\n    separation: this.state.separation,\n    enableLegacyTransitions: this.state.enableLegacyTransitions,\n    transitionDuration: this.state.transitionDuration,\n    depthFactor: this.state.depthFactor,\n    styles: this.state.styles,\n    shouldCollapseNeighborNodes: this.state.shouldCollapseNeighborNodes,\n  });\n\n  generateDataAndConfigurations = () => ({\n    configurations: this.generateConfigs(),\n    tree: this.state.data\n  });\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"demo-container\">\n          <div className=\"column-left\">\n            <div className=\"controls-container\">\n              <div className=\"prop-container\">\n                <h2 className=\"title\">Family Tree Editor</h2>\n                <h3 className=\"title\">v{version}</h3>\n\n                <div className=\"prop-container\">\n                  <h3 className=\"prop\">Save</h3>\n                  Save your changes to avoid loosing your data.<br/>\n                  <h5>Steps to save your changes</h5>\n                  <ol>\n                    <li>Create a copy of this website (you only need to do this once)</li>\n                    <li>Copy all your changes using the 'Copy Tree & Configurations' button below</li>\n                    <li>Open your <a\n                      href={`${data.repositoryLink}/edit/master/src/data/data.json`}>data file</a> and\n                      paste your changes there.<br/>\n                      Finally, hit the 'Commit changes' button at the bottom.\n                    </li>\n                    <li>If all goes well, your changes should reflect in a few minutes once you refresh the page.</li>\n                  </ol>\n                  <textarea style={{width: '100%'}}\n                            value={JSON.stringify(this.generateDataAndConfigurations(), null, 2)}\n                            disabled={true}/>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-block\"\n                    onClick={() => navigator.clipboard.writeText(JSON.stringify(this.generateDataAndConfigurations(), null, 2))}\n                  >\n                    {'Copy Tree & Configurations'}\n                  </button>\n                </div>\n\n                <h4 className=\"prop\">Data</h4>\n                <div style={{marginBottom: '5px'}}>\n                  <textarea style={{width: '100%'}}\n                            rows={12}\n                            value={JSON.stringify(this.state.data, null, 2)}\n                            onChange={(event) => this.setTreeData(JSON.parse(event.target.value))}/>\n                </div>\n              </div>\n\n              <div className=\"prop-container\">\n                <h3 className=\"prop\">Configurations</h3>\n                <h4 className=\"prop\">Title</h4>\n                <input\n                  type=\"text\"\n                  value={this.state.title}\n                  onChange={(event) => this.setTitle(event)}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Orientation</h4>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setOrientation('horizontal')}\n                >\n                  {'Horizontal'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setOrientation('vertical')}\n                >\n                  {'Vertical'}\n                </button>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Path Function</h4>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('diagonal')}\n                >\n                  {'Diagonal'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('elbow')}\n                >\n                  {'Elbow'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('straight')}\n                >\n                  {'Straight'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('step')}\n                >\n                  {'Step'}\n                </button>\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"customNodeElement\">\n                  Custom Node Element\n                </label>\n                <select className=\"form-control\" onChange={this.handleCustomNodeFnChange}>\n                  {Object.entries(customNodeFnMapping).map(([key, {description}]) => (\n                    <option key={key} value={key}>\n                      {description}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Collapsible</h4>\n                <Switch\n                  name=\"collapsibleBtn\"\n                  checked={this.state.collapsible}\n                  onChange={this.toggleCollapsible}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Collapse neighbor nodes</h4>\n                <Switch\n                  name=\"collapseNeighborsBtn\"\n                  checked={this.state.shouldCollapseNeighborNodes}\n                  onChange={this.toggleCollapseNeighborNodes}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Enable Legacy Transitions</h4>\n                <Switch\n                  name=\"enableLegacyTransitionsBtn\"\n                  checked={this.state.enableLegacyTransitions}\n                  onChange={() =>\n                    this.setState(prevState => ({\n                      enableLegacyTransitions: !prevState.enableLegacyTransitions,\n                    }))\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <div>\n                  <label className=\"prop\" htmlFor=\"translateX\">\n                    Translate X\n                  </label>\n                  <input\n                    className=\"form-control\"\n                    name=\"translateX\"\n                    type=\"number\"\n                    value={this.state.translateX}\n                    onChange={this.handleChange}\n                  />\n                </div>\n                <div>\n                  <label className=\"prop\" htmlFor=\"translateY\">\n                    Translate Y\n                  </label>\n                  <input\n                    className=\"form-control\"\n                    name=\"translateY\"\n                    type=\"number\"\n                    value={this.state.translateY}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"initialDepth\">\n                  Initial Depth\n                </label>\n                <input\n                  className=\"form-control\"\n                  style={{color: 'grey'}}\n                  name=\"initialDepth\"\n                  type=\"text\"\n                  value={this.state.initialDepth}\n                  onChange={this.handleChange}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"depthFactor\">\n                  Depth Factor\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"depthFactor\"\n                  type=\"number\"\n                  defaultValue={this.state.depthFactor}\n                  onChange={this.handleChange}\n                />\n              </div>\n\n              {/* <div className=\"prop-container prop\">{`Zoomable: ${this.state.zoomable}`}</div> */}\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"zoom\">\n                  Zoom\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"zoom\"\n                  type=\"number\"\n                  defaultValue={this.state.zoom}\n                  onChange={this.handleFloatChange}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Scale Extent</span>\n                <label className=\"sub-prop\" htmlFor=\"scaleExtentMin\">\n                  Min\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"scaleExtentMin\"\n                  type=\"number\"\n                  defaultValue={this.state.scaleExtent.min}\n                  onChange={evt =>\n                    this.setScaleExtent({\n                      min: parseFloat(evt.target.value),\n                      max: this.state.scaleExtent.max,\n                    })\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"scaleExtentMax\">\n                  Max\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"scaleExtentMax\"\n                  type=\"number\"\n                  defaultValue={this.state.scaleExtent.max}\n                  onChange={evt =>\n                    this.setScaleExtent({\n                      min: this.state.scaleExtent.min,\n                      max: parseFloat(evt.target.value),\n                    })\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Node separation</span>\n                <label className=\"sub-prop\" htmlFor=\"separationSiblings\">\n                  Siblings\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"separationSiblings\"\n                  type=\"number\"\n                  defaultValue={this.state.separation.siblings}\n                  onChange={evt =>\n                    this.setSeparation({\n                      siblings: parseFloat(evt.target.value),\n                      nonSiblings: this.state.separation.nonSiblings,\n                    })\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"separationNonSiblings\">\n                  Non-Siblings\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"separationNonSiblings\"\n                  type=\"number\"\n                  defaultValue={this.state.separation.nonSiblings}\n                  onChange={evt =>\n                    this.setSeparation({\n                      siblings: this.state.separation.siblings,\n                      nonSiblings: parseFloat(evt.target.value),\n                    })\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Node size</span>\n                <label className=\"sub-prop\" htmlFor=\"nodeSizeX\">\n                  X\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"nodeSizeX\"\n                  type=\"number\"\n                  defaultValue={this.state.nodeSize.x}\n                  onChange={evt =>\n                    this.setNodeSize({x: parseFloat(evt.target.value), y: this.state.nodeSize.y})\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"nodeSizeY\">\n                  Y\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"nodeSizeY\"\n                  type=\"number\"\n                  defaultValue={this.state.nodeSize.y}\n                  onChange={evt =>\n                    this.setNodeSize({x: this.state.nodeSize.x, y: parseFloat(evt.target.value)})\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"transitionDuration\">\n                  Transition Duration\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"transitionDuration\"\n                  type=\"number\"\n                  value={this.state.transitionDuration}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"column-right\">\n            <div className=\"tree-stats-container\">\n              Total nodes in tree: {this.state.totalNodeCount}\n            </div>\n            <div ref={tc => (this.treeContainer = tc)} className=\"tree-container\">\n              <Tree\n                data={this.state.data}\n                renderCustomNodeElement={\n                  this.state.renderCustomNodeElement\n                    ? rd3tProps => customNodeFnMapping[this.state.renderCustomNodeElement].fn(rd3tProps, this.state)\n                    : undefined\n                }\n                rootNodeClassName=\"demo-node\"\n                branchNodeClassName=\"demo-node\"\n                orientation={this.state.orientation}\n                translate={{x: this.state.translateX, y: this.state.translateY}}\n                pathFunc={this.state.pathFunc}\n                collapsible={this.state.collapsible}\n                initialDepth={this.state.initialDepth}\n                zoomable={this.state.zoomable}\n                zoom={this.state.zoom}\n                scaleExtent={this.state.scaleExtent}\n                nodeSize={this.state.nodeSize}\n                separation={this.state.separation}\n                enableLegacyTransitions={this.state.enableLegacyTransitions}\n                transitionDuration={this.state.transitionDuration}\n                depthFactor={this.state.depthFactor}\n                styles={this.state.styles}\n                shouldCollapseNeighborNodes={this.state.shouldCollapseNeighborNodes}\n                // onUpdate={(...args) => {console.log(args)}}\n                onNodeClick={(...args) => {\n                  console.log('onNodeClick');\n                  console.log(args);\n                }}\n                onNodeMouseOver={(...args) => {\n                  console.log('onNodeMouseOver', args);\n                }}\n                onNodeMouseOut={(...args) => {\n                  console.log('onNodeMouseOut', args);\n                }}\n                onLinkClick={(...args) => {\n                  console.log(args);\n                }}\n                onLinkMouseOver={(...args) => {\n                  console.log('onLinkMouseOver', args);\n                }}\n                onLinkMouseOut={(...args) => {\n                  console.log('onLinkMouseOut', args);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Editor;\n","import React, {Component} from 'react';\nimport Tree from 'react-d3-tree';\nimport MixedNodeElement from './MixedNodeElement';\nimport PureSvgNodeElement from './PureSvgNodeElement';\nimport '../App.css';\n\nconst customNodeFnMapping = {\n  svg: {\n    description: 'Default - Pure SVG node & label (IE11 compatible)',\n    fn: (rd3tProps, configs) => (\n      <PureSvgNodeElement\n        nodeDatum={rd3tProps.nodeDatum}\n        toggleNode={rd3tProps.toggleNode}\n        orientation={configs.orientation}\n      />\n    ),\n  },\n  mixed: {\n    description: 'MixedNodeElement - SVG `circle` + `foreignObject` label',\n    fn: ({nodeDatum, toggleNode, configs}) => (\n      <MixedNodeElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        foreignObjectProps={{\n          width: configs.nodeSize.x,\n          height: configs.nodeSize.y,\n          x: -50,\n          y: 50,\n        }}\n      />\n    ),\n  },\n};\n\nclass FamilyTree extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      translateX: 128,\n      translateY: 128,\n    };\n  }\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translateX: dimensions.width / 2.5,\n      translateY: dimensions.height / 2,\n    });\n  }\n\n  render() {\n    const {data, configurations} = this.props;\n    return (\n      <div className=\"App\">\n        <div className=\"demo-container\">\n          <div className=\"column-right\">\n            <div className=\"tree-stats-container\">\n              <h2>{configurations.title}</h2>\n            </div>\n            <div ref={tc => (this.treeContainer = tc)} className=\"tree-container\">\n              <Tree\n                data={data}\n                renderCustomNodeElement={\n                  configurations.renderCustomNodeElement\n                    ? rd3tProps => customNodeFnMapping[configurations.renderCustomNodeElement].fn(rd3tProps, configurations)\n                    : undefined\n                }\n                rootNodeClassName=\"demo-node\"\n                branchNodeClassName=\"demo-node\"\n                orientation={configurations.orientation}\n                translate={{x: this.state.translateX, y: this.state.translateY}}\n                pathFunc={configurations.pathFunc}\n                collapsible={configurations.collapsible}\n                initialDepth={configurations.initialDepth}\n                zoomable={configurations.zoomable}\n                zoom={configurations.zoom}\n                scaleExtent={configurations.scaleExtent}\n                nodeSize={configurations.nodeSize}\n                separation={configurations.separation}\n                enableLegacyTransitions={configurations.enableLegacyTransitions}\n                transitionDuration={configurations.transitionDuration}\n                depthFactor={configurations.depthFactor}\n                styles={configurations.styles}\n                shouldCollapseNeighborNodes={configurations.shouldCollapseNeighborNodes}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FamilyTree;\n","import React, {Component} from 'react';\nimport '../App.css';\nimport FamilyTree from \"./FamilyTree\";\n// Data data\nimport data from './../data/data.json';\n\nclass Viewer extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"demo-container\">\n          <div className=\"column-right\">\n            <FamilyTree data={data.tree} configurations={data.configurations}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Viewer;\n","import React, {Component} from 'react';\nimport Editor from \"./components/Editor\";\nimport Viewer from \"./components/Viewer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editMode: false\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"demo-container\">\n          <button title={'Edit'}\n                  onClick={() => this.setState({...this.state, editMode: !this.state.editMode})}/>\n          {this.state.editMode ? <Editor/> : <Viewer/>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}